version: '2'
services:
{% if dockerKitchenSink or docker.WEB == True %}
  web:
    image: httpd
    container_name: apache
    ports:
      - 80:80
    volumes:
      - /storage/docker/webserver/html:/usr/local/apache2/htdocs/

{% endif %}
{% if dockerKitchenSink or docker.PORTAINER == True %}
  portainer:
    image: portainer/portainer:linux-arm
    container_name: portainer
    command: --no-auth
    ports:
      - 9000:9000 
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

{% endif %}
{% if dockerKitchenSink or docker.SAMBA == True %}
  samba:
    container_name: samba
    image: dastrasmue/rpi-samba:v3
    network_mode: "host"
    ports: 
      - 137:137/udp
      - 138:138/udp
      - 139:139
      - 445:445
    volumes:
      - /storage:/share
    command: ["-s", "public:/share/public:rw:", "-s", "docker:/share/docker:rw:"]
  
{% endif %}  
{% if dockerKitchenSink or docker.HOMEASSISTANT == True %}
  homeassistant:
    container_name: homeassistant
    image: homeassistant/raspberrypi3-homeassistant
    network_mode: "host"
    ports:
      - 8123:8123
    volumes:
      - /storage/docker/homeassistant:/config

{% endif %}
{% if dockerKitchenSink or docker.HOMEASSISTANT_APPDAEMON == True %}
  appdaemon:
    container_name: appdaemon
    image: torkildr/rpi-appdaemon:2.1.11
    network_mode: "host"
    environment:
      - HA_URL:"http://localhost:8123"
      - DASH_URL:"http://localhost:5050"
    ports:
      - 5050:5050
    depends_on:
      - homeassistant
    volumes:
      - /storage/docker/homeassistant-appdaemon:/conf

{% endif %}
{% if dockerKitchenSink or docker.JUPYTER == True %}
  jupyter:
    container_name: jupyter
    image: mohankumargupta/rpi-tensorflow
    command: bash /run_jupyter.sh
    ports:
      - 8888:8888
      - 6006:6006
    volumes:
      - /storage/docker/jupyter:/root/.jupyter
      - /storage/docker/jupyter/tensorboards:/tensorboards
      - /storage/docker/jupyter/run_jupyter.sh:/run_jupyter.sh
      - /storage/docker/jupyter/notebooks:/notebooks

{% endif %}
{% if dockerKitchenSink or docker.OPENHAB == True %}
  openhab:
    container_name: openhab
    image: openhab/openhab:2.3.0-snapshot-armhf-debian
    tty: true
    ports:
      - 8080:8080
      - 8443:8443
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/etc/timezone:/etc/timezone:ro"
      - "/storage/docker/openhab/openhab_addons:/openhab/addons"
      - "/storage/docker/openhab/openhab_conf:/openhab/conf"
      - "/storage/docker/openhab/openhab_userdata:/openhab/userdata"

{% endif %}
{% if dockerKitchenSink or docker.MQTT == True %}
  mqtt:
    container_name: mqtt
    image: mohankumargupta/mqtt
    ports:
      - 1883:1883
    volumes:
      - "/storage/docker/mqtt/:/mosquitto/config/"

{% endif %}
{% if dockerKitchenSink or docker.INFLUXDB == True %}
  influxdb:
    container_name: influxdb
    image: influxdb
    ports:
      - 8086:8086
    volumes:
      - "/storage/docker/influxdb:/var/lib/influxdb"
{% endif %}
{% if dockerKitchenSink or docker.MONGODB == True %}
  mongodb:
    container_name: mongodb
    command: ["mongod","--rest", "--journal"]
    image: joseba/rpi-mongodb
    ports:
      - 27017:27017
      - 28017:28017
    volumes:
      - "/storage/docker/mongodb/db:/data/db"
      - "/storage/docker/mongodb/configdb:/data/configdb"

{% endif %}
{% if dockerKitchenSink or docker.REDIS == True %}
  redis:
    container_name: redis
    image: redis
    ports:
      - 6379:6379
    volumes:
      - "/storage/docker/redis/data:/data"

{% endif %}
{% if dockerKitchenSink or docker.POSTGRES == True %}
  postgres:
    container_name: postgres
    image: postgres
    ports:
      - 5432:5432
    volumes:
      - "/storage/docker/postgres/data:/var/lib/postgresql/data"

{% endif %}
{% if dockerKitchenSink or docker.NODERED == True %}
  nodered:
     container_name: nodered
     image: nodered/node-red-docker:rpi-v8
     ports:
       - 1881:1880
     volumes:
       - "/storage/docker/nodered:/data"

{% endif %}
{% if dockerKitchenSink or docker.GRAFANA == True %}
  grafana:
     container_name: grafana
     image: fg2it/grafana-armhf:v5.0.0
     ports:
       - 3000:3000
     volumes:
       - "/storage/docker/grafana/data:/var/lib/grafana"
       - "/storage/docker/grafana/config:/etc/grafana"

{% endif %}

